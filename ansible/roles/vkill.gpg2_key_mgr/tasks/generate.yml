---
# ref https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html

- name: "Ensure {{ gpg2_key_basedir }}/{{ gpg2_key_path }} directory exists with right permissions"
  file:
    dest: "~/{{ gpg2_key_basedir }}/{{ gpg2_key_path }}"
    state: directory
    mode: 0700
  become: yes
  become_user: "{{ gpg2_key_user }}"

- name: Copy gpg2_key_generate_script
  template:
    src: "gpg2_key_generate_script"
    dest: "~/{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/generate_script"
    mode: 0600
  become: yes
  become_user: "{{ gpg2_key_user }}"

- name: Check existing secret key
  shell: "gpg --list-secret-keys | grep '{{ gpg2_key_uid }}'"
  changed_when: false
  ignore_errors: true
  register: gpg2_keys
  become: yes
  become_user: "{{ gpg2_key_user }}"

- name: Generate new secret key
  command: "gpg --batch --gen-key ~/{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/generate_script"
  args:
    chdir: "~/{{ gpg2_key_basedir }}"
  become: yes
  become_user: "{{ gpg2_key_user }}"
  when: gpg2_keys.stdout == ""

- name: Import generated secret key
  command: "gpg --import '{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/{{ gpg2_key_files.public }}' '{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/{{ gpg2_key_files.private }}'"
  args:
    chdir: "~"
  become: yes
  become_user: "{{ gpg2_key_user }}"
  when: gpg2_keys.stdout == ""

- name: Generate secret key fingerprint file
  shell: "gpg --fingerprint '{{ gpg2_key_uid }}' | awk -F= '/Key fingerprint/ { gsub(/ /,\"\", $2); print $2 }' > '{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/{{ gpg2_key_files.fingerprint }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg2_key_user }}"

- name: Generate secret key public ASCII file
  shell: "gpg --armor --export '{{ gpg2_key_uid }}' > '{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/{{ gpg2_key_files.public_asc }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg2_key_user }}"

- name: Generate secret key uid file
  shell: "echo '{{ gpg2_key_uid }}' > '{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/{{ gpg2_key_files.uid }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg2_key_user }}"

# TODO
- name: Generate secret key uid hash file
  shell: "echo '{{ gpg2_key_uid }}' > '{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/{{ gpg2_key_files.uid_hash }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg2_key_user }}"

- name: Fetch files to local
  fetch:
    src: "~/{{ gpg2_key_basedir }}/{{ gpg2_key_path }}/{{ gpg2_key_files[item] }}"
    dest: "{{ gpg2_key_fetch_dest_basedir }}/{{ item }}"
    flat: "{{ gpg2_key_fetch_flat }}"
  become: yes
  become_user: "{{ gpg2_key_user }}"
  with_items: "{{ gpg2_key_fetch_files }}"
