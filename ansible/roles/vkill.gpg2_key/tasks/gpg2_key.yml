# ref https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html

- name: Ensure .gnupg config directory exists with right permissions
  file:
    dest: "~/{{ gpg2_path }}"
    state: directory
    mode: 0700
  become: yes
  become_user: "{{ gpg2_user }}"

- name: Ensure .gnupg/secret directory exists with right permissions
  file:
    dest: "~/{{ gpg2_path }}/{{ gpg2_key_path }}"
    state: directory
    mode: 0700
  become: yes
  become_user: "{{ gpg2_user }}"

- name: Copy gpg2_generate_key_script
  template:
    src: "gpg2_generate_key_script"
    dest: "~/{{ gpg2_path }}/{{ gpg2_key_path }}/generate_key_script"
    mode: 0600
  become: yes
  become_user: "{{ gpg2_user }}"

- name: Check existing secret key
  shell: "gpg --list-secret-keys | grep '{{ gpg2_key_unique_uid }}'"
  changed_when: false
  ignore_errors: true
  register: gpg_keys
  become: yes
  become_user: "{{ gpg2_user }}"

- name: Generate new secret key
  command: "gpg --batch --gen-key ~/{{ gpg2_path }}/{{ gpg2_key_path }}/generate_key_script chdir=~/{{ gpg2_path }}"
  become: yes
  become_user: "{{ gpg2_user }}"
  when: gpg_keys.stdout == ""

- name: Import generated secret key
  command: "gpg --import ~/{{ gpg2_path }}/{{ gpg2_key_public_file }} ~/{{ gpg2_path }}/{{ gpg2_key_private_file }}"
  become: yes
  become_user: "{{ gpg2_user }}"
  when: gpg_keys.stdout == ""

- name: Generate secret key fingerprint file
  shell: "gpg --fingerprint {{ gpg2_key_unique_uid }} | awk -F= '/Key fingerprint/ { gsub(/ /,\"\", $2); print $2 }' | tee ~/{{ gpg2_path }}/{{ gpg2_key_fingerprint_file }}"
  changed_when: false
  become: yes
  become_user: "{{ gpg2_user }}"

- name: Generate secret key public ASCII file
  shell: "gpg --armor --output ~/{{ gpg2_path }}/{{ gpg2_key_public_asc_file }} --export {{ gpg2_key_unique_uid }}"
  changed_when: false
  become: yes
  become_user: "{{ gpg2_user }}"

